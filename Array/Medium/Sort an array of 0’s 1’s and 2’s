Brute Force approach :
TC : O(nlogn)
SC : O(n)

void sortColors(vector<int>& arr) {
        int n = arr.size();
        for (int i = 0; i < n - 1; i++)
            for (int j = 0; j < n - i - 1; j++)
                if (arr[j] > arr[j + 1])
         
         
         
Better Approach :
TC : O(2N)
SC : O(1))

void sortColors(vector<int>& a) {
        int cnt0 = 0, cnt1 = 0, cnt2 = 0;
        int n = a.size();
        for(int i=0; i<n; i++){
            if(a[i]==0)
                cnt0++;
            
            else if(a[i]==1)
                cnt1++;

            else 
                cnt2++;
        }

        for(int i=0;i<cnt0;i++)
            a[i] = 0;

        for(int i = cnt0; i<cnt0+cnt1; i++)
            a[i]  = 1;

        for(int i = cnt0+cnt1; i<n; i++)
            a[i] = 2;
    }
    
    
Optimal Approach (Dutch National Flag Algorithm)
TC : O(N)
SC : O(1)

  void sortColors(vector<int>& a) {
      int low = 0,mid = 0, high = a.size()-1;
      while(mid<=high){
          if(a[mid]==0){
              swap(a[mid],a[low]);
              low++;
              mid++;
          }
          else if(a[mid]==1)
            mid++;

          else if(a[mid]==2){
              swap(a[mid],a[high]);
              high--;
          }
      }
    }
