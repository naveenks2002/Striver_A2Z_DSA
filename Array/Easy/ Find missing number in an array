MY METHOD 1 :
int missingNumber(vector<int>& nums) {
        for(int i=0; i<=nums.size(); i++){
            auto it = find(nums.begin(),nums.end(),i);
            if(it!=nums.end())
                continue;
            else
                return i;
        }
        return 0;
    }
    
    
MY METHOD 2 :
 int missingNumber(vector<int>& nums) {
        // for(int i=0; i<=nums.size(); i++){
        //     auto it = find(nums.begin(),nums.end(),i);
        //     if(it!=nums.end())
        //         continue;
        //     else
        //         return i;
        // }
        sort(nums.begin(),nums.end());
        int i;
        for(i=0; i<nums.size(); i++)
            if(i!=nums[i])
                return i;
        
        return i;
    }
    
    STRIVER SUM APPROACH : 
      int missingNumber(vector<int>& nums) {
        int n = nums.size();
        int sum = n*(n+1)/2;
        int s2 = 0;

        for(int i=0; i<n; i++)
            s2 += nums[i];
        
        return (sum - s2);
    }
    
    STRIVER XOR APPROACH :
    int missingNumber(vector<int>& nums) {
        int XOR1 = 0;
        int XOR2 = 0;
        int n = nums.size();

        for(int i=1; i<=n ; i++){
            XOR1= XOR1^i;
        }

        for(int i=0; i<n; i++ )
            XOR2 = XOR2^nums[i];

        return (XOR1^XOR2);
    }
